getLastInsertedId:
SELECT last_insert_rowid();

-- Player

CREATE TABLE playerEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);

insertPlayerEntity:
INSERT OR REPLACE INTO playerEntity(
    id,
    name
)
VALUES(?, ?);

deletePlayer:
DELETE FROM playerEntity
WHERE id = ?;

getPlayers:
SELECT * FROM playerEntity ORDER BY id DESC;

getPlayer:
SELECT * FROM playerEntity WHERE id = ?;

-- Game

CREATE TABLE gameEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    game_goal INTEGER NOT NULL,
    timestamp INTEGER NOT NULL
);

getGames:
SELECT
ge.id AS gameId,
ge.game_goal AS goal,
ge.timestamp AS timestamp,
pe.id AS playerId,
pe.name AS playerName,
gpe.game_order AS gameOrder,
gpe.is_winner AS isWinner
FROM gameEntity ge
JOIN gamePlayerEntity gpe ON ge.id = gpe.game_id
JOIN playerEntity pe ON gpe.player_id = pe.id
ORDER BY ge.timestamp DESC, gameOrder ASC;

insertGameEntity:
INSERT OR REPLACE INTO gameEntity(
    id,
    game_goal,
    timestamp
)
VALUES(?, ?, ?);

deleteGame:
DELETE FROM gameEntity
WHERE id = ?;

getPlayerGames:
SELECT
ge.id AS gameId,
ge.game_goal AS goal,
ge.timestamp AS timestamp,
pe.id AS playerId,
pe.name AS playerName,
gpe.game_order AS gameOrder,
gpe.is_winner AS isWinner
FROM gameEntity ge
JOIN gamePlayerEntity gpe ON ge.id = gpe.game_id
JOIN playerEntity pe ON gpe.player_id = pe.id
WHERE gpe.player_id = ?
ORDER BY ge.timestamp DESC, gameOrder ASC;

-- GamePlayer

CREATE TABLE gamePlayerEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    game_id INTEGER NOT NULL,
    player_id INTEGER NOT NULL,
    game_order INTEGER NOT NULL,
    is_winner INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES gameEntity(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES playerEntity(id) ON DELETE CASCADE
);

insertGamePlayerEntity:
INSERT OR REPLACE INTO gamePlayerEntity(
    id,
    game_id,
    player_id,
    game_order,
    is_winner
)
VALUES(?, ?, ?, ?, ?);

deleteGamePlayer:
DELETE FROM gamePlayerEntity
WHERE game_id = ?;

-- Set

CREATE TABLE setEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    game_id INTEGER NOT NULL,
    player_id INTEGER NOT NULL,
    score INTEGER NOT NULL,
    leftAfter INTEGER NOT NULL,
    isOverkill INTEGER NOT NULL,
    FOREIGN KEY (game_id) REFERENCES gameEntity(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES playerEntity(id) ON DELETE CASCADE
);

insertSetEntity:
INSERT OR REPLACE INTO setEntity(
    id,
    game_id,
    player_id,
    score,
    leftAfter,
    isOverkill
)
VALUES(?, ?, ?, ?, ?, ?);

getGameSets:
SELECT * FROM setEntity
WHERE game_id = ?;

deleteSet:
DELETE FROM setEntity
WHERE game_id = ?;

-- Shot

CREATE TABLE shotEntity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    set_id INTEGER NOT NULL,
    player_id INTEGER NOT NULL,
    order_number INTEGER NOT NULL,
    sector INTEGER NOT NULL,
    shot_value INTEGER NOT NULL,
    FOREIGN KEY (set_id) REFERENCES setEntity(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES playerEntity(id) ON DELETE CASCADE
);

insertShotEntity:
INSERT OR REPLACE INTO shotEntity(
    id,
    set_id,
    player_id,
    order_number,
    sector,
    shot_value
)
VALUES(?, ?, ?, ?, ?, ?);

deleteShots:
DELETE FROM shotEntity
WHERE set_id = ?;

-- GetPlayerHistory
getPlayerHistory:
SELECT
se.id AS setId,
se.score AS score,
se.leftAfter AS leftAfter,
se.isOverkill AS isOverkill,
she.order_number AS shotOrder,
she.sector AS sectorId,
she.shot_value AS sectorValue
FROM setEntity se
JOIN shotEntity she ON se.id = she.set_id
WHERE se.game_id = ? AND se.player_id = ?
ORDER BY setId ASC;

--Statistics
getPlayerBestSet:
SELECT
se.id AS setId,
se.score AS score,
se.leftAfter AS leftAfter,
se.isOverkill AS isOverkill,
she.order_number AS shotOrder,
she.sector AS sectorId,
she.shot_value AS sectorValue
FROM setEntity se
JOIN shotEntity she ON se.id = she.set_id
WHERE score = (SELECT MAX(score) FROM setEntity WHERE setEntity.player_id = ?)
AND se.player_id = ?;

getPlayerMostFrequentSectors:
SELECT
she.sector AS sector
FROM shotEntity she
WHERE she.player_id = ?
AND sector > 0
GROUP BY she.sector
ORDER BY COUNT(she.sector) DESC
LIMIT 3;

getPlayerBiggestFinalSet:
SELECT
se.id AS setId,
se.score AS score,
se.leftAfter AS leftAfter,
se.isOverkill AS isOverkill,
she.order_number AS shotOrder,
she.sector AS sectorId,
she.shot_value AS sectorValue
FROM setEntity se
JOIN shotEntity she ON se.id = she.set_id
WHERE she.player_id = ?
AND leftAfter = 0
ORDER BY se.score DESC, se.id ASC
LIMIT 3;

getAverageSetScore:
SELECT
AVG(se.score) AS averageScore
FROM setEntity se;

getPlayerAverageSetScore:
SELECT
AVG(se.score) AS averageScore
FROM setEntity se
WHERE se.player_id = ?;

getAverageShotValue:
SELECT
AVG(she.shot_value) AS averageShotValue
FROM shotEntity she;

getPlayerAverageShotValue:
SELECT
AVG(she.shot_value) AS averageShotValue
FROM shotEntity she
WHERE she.player_id = ?
AND she.sector >= 0;

getShotDistribution:
SELECT
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector = 0) AS missesCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector = 1) AS doubleBullseyeCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector = 2) AS singleBullseyeCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector IN (3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81)) AS singlesCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector IN (6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82)) AS doublesCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector IN (4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80)) AS triplesCount;


getPlayerShotDistribution:
SELECT
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector = 0 AND she.player_id = ?) AS missesCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector = 1 AND she.player_id = ?) AS doubleBullseyeCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector = 2 AND she.player_id = ?) AS singleBullseyeCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector IN (3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81) AND she.player_id = ?) AS singlesCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector IN (6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82) AND she.player_id = ?) AS doublesCount,
(SELECT COUNT(she.id) AS shotsCount FROM shotEntity she WHERE she.sector IN (4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80) AND she.player_id = ?) AS triplesCount;

getVictoryDistribution:
SELECT
(SELECT COUNT(gpe.id) FROM gamePlayerEntity gpe WHERE gpe.player_id = ? AND gpe.is_winner = 1) AS victoriesCount,
(SELECT COUNT(gpe.id) FROM gamePlayerEntity gpe WHERE gpe.player_id = ?) AS gamesCount;

getSectorCount:
SELECT COUNT (she.id) AS sectorCount FROM shotEntity she WHERE she.sector = ? AND she.player_id = ?;
